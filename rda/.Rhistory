devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
git config --global http.proxy 'socks5://127.0.0.1:1080'
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
devtools::install_github('adamlilith/enmSdm')
remotes::install_github('adamlilith/enmSdm')
library("lavaan")
HS.model <- 'visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed =~ x7 + x8 + x9'
fit <- cfa(HS.model, data = HolzingerSwineford1939)
parTable(fit)
parTable(fit)
HS.model <- 'visual =~ x1 + x2 + x3
textual =~ x4 + x5 + x6
speed  =~x7+x8+x9'
fit <- cfa(HS.model, data = HolzingerSwineford1939)
summary(fit, fit.measures = TRUE)
parameterEstimates(fit)
Est <- parameterEstimates(fit, ci = FALSE, standardized = TRUE)
subset(Est, op == "=~")
model <- '
# measurement model
ind60 =~ x1
dem60 =~ y1
dem65 =~ y5
# regressions
dem60 ~ ind60
dem65 ~ ind60
# residual covariances
y1~~y5
y2~~y4 +y6
y3~~y7
y4 ~~ y8
y6 ~~ y8'
fit <- sem(model, data = PoliticalDemocracy) summary(fit, standardized = TRUE)
fit <- sem(model, data = PoliticalDemocracy)
model <- '
# measurement model
ind60 =~ x1 + x2 + x3
dem60 =~ y1 + y2 + y3 + y4
dem65 =~ y5 + y6 + y7 + y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual covariances
y1~~y5
y2~~y4 +y6
y3~~y7
y4 ~~ y8
y6 ~~ y8'
fit <- sem(model, data = PoliticalDemocracy)
summary(fit, standardized = TRUE)
coef(fit)
model.equal <- '# measurement model
ind60 =~ x1 + x2+x3
dem60 =~ y1 + d1*y2 + d2*y3 + d3*y4
dem65 =~ y5 + d1*y6 + d2*y7 + d3*y8
# regressions
dem60 ~ ind60
dem65 ~ ind60 + dem60
# residual covariances
y1~~y5
y2~~y4 +y6
y3~~y7
y4~~y8
y6 ~~ y8'
fit.equal <- sem(model.equal, data = PoliticalDemocracy)
summary(fit.equal)
library(adegenet)
library(poppr)
library(tidyverse)
setwd('/Users/calice/desktop/Rstats/rda')
load("lobster_1278ind_79snps_40pop.RData")
data_filt
nLoc(data_filt)
nPop(data_filt)
nInd(data_filt)
head(data_filt)
summary(data_filt$pop)
popNames(data_filt) = gsub("Sar13", "Sar", popNames(data_filt))
popNames(data_filt) = gsub("Sar17", "Sar", popNames(data_filt))
popNames(data_filt) = gsub("Tar", "Laz", popNames(data_filt))
popNames(data_filt) = gsub("Idr16", "Idr", popNames(data_filt))
popNames(data_filt) = gsub("Idr17", "Idr", popNames(data_filt))
data_filt
nPop(data_filt) # number of sites
nInd(data_filt) # number of individuals
summary(data_filt$pop) # sample size
allele_freqs = data.frame(rraf(data_filt, by_pop=TRUE, correction = FALSE), check.names = FALSE)
allele_freqs = allele_freqs[, seq(1, dim(allele_freqs)[2], 2)]
write.csv(allele_freqs, file = "allele_freqs.csv", row.names = TRUE)
site_list = seppop(data_filt)
names(site_list)
maf_list = lapply(site_list, FUN = minorAllele)
maf = as.data.frame(maf_list) %>% t() %>% as.data.frame()
head(maf)
write.csv(maf, file = "minor_allele_freqs.csv", row.names = TRUE)
allele_freqs$site = rownames(allele_freqs)
addregion = function(x){
# If pop label is present function will output the region
if(x=="Ale"|x=="The"|x=="Tor"|x=="Sky") y = " Aegean Sea "
if(x=="Sar"|x=="Laz") y = " Central Mediterranean "
if(x=="Vig"|x=="Brd"|x=="Cro"|x=="Eye"|x=="Heb"|x=="Iom"|x=="Ios"|x=="Loo"|x=="Lyn"|x=="Ork"|x=="Pad"|x=="Pem"|x=="She"|x=="Sbs"|x=="Sul") y = " Atlantic "
if(x=="Jer"|x=="Idr"|x=="Cor"|x=="Hoo"|x=="Kil"|x=="Mul"|x=="Ven") y = " Atlantic "
if(x=="Hel"|x=="Oos"|x=="Tro"|x=="Ber"|x=="Flo"|x=="Sin"|x=="Gul"|x=="Kav"|x=="Lys") y = " Scandinavia "
return(y)
}
allele_freqs$region = sapply(rownames(allele_freqs), addregion)
allele_freqs.long = allele_freqs %>%
pivot_longer(cols = 1:79, names_to = "allele", values_to = "frequency")
allele_freqs.long
unique(allele_freqs.long$site)
site_order =  c("Tro","Ber","Flo","Gul","Kav","Lys","Sin","Hel","Oos",
"Cro","Brd","Eye",
"She","Ork","Heb","Sul","Cor","Hoo","Iom","Ios","Jer","Kil",
"Loo","Lyn","Mul","Pad","Pem","Sbs","Ven",
"Idr","Vig",
"Sar","Laz","Ale","Sky","The","Tor")
allele_freqs.long$site_ord = factor(allele_freqs.long$site, levels = site_order)
col_scheme = c("#7FC97F","#377EB8","#FDB462","#E31A1C")
desired_loci = c("7502","25608","31462","35584","42395","53314","58053","65064","65576")
desired_loci_ID = sapply(paste(desired_loci, "..", sep = ""),
grep,
unique(allele_freqs.long$allele),
value = TRUE) %>% as.vector()
allele_freqs.sub = allele_freqs.long %>% filter(allele %in% desired_loci_ID)
ggtheme = theme(
axis.text.x = element_blank(),
axis.text.y = element_text(colour="black", size=6),
axis.title = element_text(colour="black", size=15),
panel.background = element_rect(fill="white"),
panel.grid.minor = element_blank(),
panel.grid.major = element_blank(),
panel.border = element_rect(colour="black", fill=NA, size=0.5),
plot.title = element_text(hjust = 0.5, size=18),
legend.title = element_blank(),
legend.text = element_text(size=15),
legend.position = "top",
legend.justification = "centre",
# facet labels
strip.text = element_text(colour="black", size=14)
)
ggplot(data = allele_freqs.sub, aes(x = site_ord, y = frequency, fill = region))+
geom_bar(stat = "identity", colour = "black", size = 0.3)+
facet_wrap(~allele, scales = "free")+
scale_y_continuous(limits = c(0,1), expand = c(0,0))+
scale_fill_manual(values = col_scheme)+
ylab("Allele frequency")+
xlab("Site")+
ggtheme
install.packages(c("adespatial", "marmap", "SoDA"))
install.packages(c("adespatial", "marmap", "SoDA"))
library(marmap)
library(tidyverse)
library(ade4)
library(adespatial)
library(SoDA)
setwd('/Users/calice/desktop/Rstats/rda')
bathydata = getNOAA.bathy(lon1 = -15,
lon2 = 30,
lat1 = 35,
lat2 = 65,
resolution = 2)
coords = read.csv("coordinates.csv")
head(coords)
coords.gps = dplyr::select(coords, Lon, Lat)
depths = cbind(site = coords$Site, get.depth(bathydata, coords.gps, locator = FALSE))
depths
depths$depth <= -10
plot(bathydata)
points(coords$Lon, coords$Lat, pch = 21, bg = "yellow", col = "black", cex = 2)
load("least_cost_paths.RData")
plot.bathy(bathydata, image= TRUE, land = TRUE, n = 0,
bpal = list(c(0, max(bathydata), "grey"),
c(min(bathydata), 0, "royalblue")))
lapply(lc_paths, lines, col = "orange", lwd = 2, lty = 1)
plot.bathy(bathydata, image= TRUE, land = TRUE, n = 0,
bpal = list(c(0, max(bathydata), "grey"),
c(min(bathydata), 0, "royalblue")))
plot.bathy(bathydata, image= TRUE, land = TRUE, n = 0,
bpal = list(c(0, max(bathydata), "grey"),
c(min(bathydata), 0, "royalblue")))
lapply(lc_paths, lines, col = "orange", lwd = 2, lty = 1)
lc_dist = lc.dist(trans1, coords.gps, res = "dist")
trans1 = trans.mat(bathydata, min.depth = -10, max.depth = NULL)
lc_dist = lc.dist(trans1, coords.gps, res = "dist")
lc_mat = as.matrix(lc_dist)
colnames(lc_mat) = as.vector(coords$Site)
rownames(lc_mat) = as.vector(coords$Site)
lc_mat
vignette("tutorial", package = "adespatial")
dbmems = dbmem(lc_dist, MEM.autocor = "non-null")
dbmems
install.packages(c("rnaturalearth", "rnaturalearthdata"))
library(rnaturalearth)
library(rnaturalearthdata)
library(rnaturalearthhires)
library(ggplot2)
library(RColorBrewer)
library(ggpubr)
devtools::install_github("ropenscilabs/rnaturalearthhires")
library(raster)
library(dplyr)
devtools::install_github("ropenscilabs/rnaturalearthhires")
library(rnaturalearthhires)
sst.present = raster("Present.Surface.Temperature.Mean.asc")
sbt.present = raster("Present.Benthic.Max.Depth.Temperature.Mean.asc")
sss.present = raster("Present.Surface.Salinity.Mean.asc")
sbs.present = raster("Present.Benthic.Max.Depth.Salinity.Mean.asc")
ssc.present = raster("Present.Surface.Chlorophyll.Mean.asc")
ssca.present = raster("Present.Surface.Calcite.Mean.asc")
coords = read.csv("coordinates.csv")
names(coords)
points = SpatialPoints(subset(coords, select = c("Lon","Lat")))
df = data.frame(site = coords$Site,
sst_mean = extract(sst.present, points),
sbt_mean = extract(sbt.present, points),
sss_mean = extract(sss.present, points),
sbs_mean = extract(sbs.present, points),
ssc_mean = extract(ssc.present, points),
ssca_mean = extract(ssca.present, points)
)
sst.df = crop(sst.present, y = boundary) %>% rasterToPoints() %>% data.frame()
sbt.df = crop(sbt.present, y = boundary) %>% rasterToPoints() %>% data.frame()
sss.df = crop(sss.present, y = boundary) %>% rasterToPoints() %>% data.frame()
sbs.df = crop(sbs.present, y = boundary) %>% rasterToPoints() %>% data.frame()
ssc.df = crop(ssc.present, y = boundary) %>% rasterToPoints() %>% data.frame()
ssca.df = crop(ssca.present, y = boundary) %>% rasterToPoints() %>% data.frame()
extent(points)
boundary = extent(-20, 30, 35, 65)
boundary
sst.df = crop(sst.present, y = boundary) %>% rasterToPoints() %>% data.frame()
sbt.df = crop(sbt.present, y = boundary) %>% rasterToPoints() %>% data.frame()
sss.df = crop(sss.present, y = boundary) %>% rasterToPoints() %>% data.frame()
sbs.df = crop(sbs.present, y = boundary) %>% rasterToPoints() %>% data.frame()
ssc.df = crop(ssc.present, y = boundary) %>% rasterToPoints() %>% data.frame()
ssca.df = crop(ssca.present, y = boundary) %>% rasterToPoints() %>% data.frame()
basemap = ne_countries(scale = "large")
basemap = crop(basemap, y = boundary) %>% fortify()
ggtheme = theme(axis.title = element_text(size = 12),
axis.text = element_text(size = 10, colour = "black"),
panel.border = element_rect(fill = NA, colour = "black", size = 0.5),
legend.title = element_text(size = 13),
legend.text = element_text(size = 12),
plot.title = element_text(size = 15, hjust = 0.5),
panel.grid = element_blank())
temp.cols = colorRampPalette(c("blue","white","red"))
sal.cols = colorRampPalette(c("darkred","white"))
chlor.cols = colorRampPalette(c("white","green"))
calct.cols = colorRampPalette(c("white","#662506"))
sst.plt = ggplot()+
geom_tile(data = sst.df, aes(x = x, y = y, fill = sst.df[, 3]))+
geom_polygon(data = basemap, aes(x = long, y = lat, group = group))+
coord_quickmap(expand = F)+
xlab("Longitude")+
ylab("Latitude")+
ggtitle("Sea surface temperature (present-day)")+
scale_fill_gradientn(expression(~degree~C), colours = temp.cols(10), limits = c(-1.5,24))+
ggtheme
sst.plt
ggsave("1.sst_heatmap.png", width = 10, height = 9, dpi = 600)
ggsave("Rplot5.png", width = 10, height = 9, dpi = 300)
ggsave("Rplot15.png", width = 10, height = 9, dpi = 300)
sbt.plt = ggplot()+
geom_tile(data = sbt.df, aes(x = x, y = y, fill = sbt.df[, 3]))+
geom_polygon(data = basemap, aes(x = long, y = lat, group = group))+
coord_quickmap(expand = F)+
xlab("Longitude")+
ylab("Latitude")+
ggtitle("Sea bottom temperature (present-day)")+
scale_fill_gradientn(expression(~degree~C), colours = temp.cols(10), limits = c(-1.5,24))+
ggtheme
sbt.plt
ggsave("Rplot16.png", width = 10, height = 9, dpi = 200)
sss.plt = ggplot()+
geom_tile(data = sss.df, aes(x = x, y = y, fill = sss.df[, 3]))+
geom_polygon(data = basemap, aes(x = long, y = lat, group = group))+
coord_quickmap(expand = F)+
xlab("Longitude")+
ylab("Latitude")+
ggtitle("Sea surface salinity (present-day)")+
scale_fill_gradientn("PPS", colours = sal.cols(10), limits = c(1,40))+
ggtheme
sss.plt
ggsave("Rplot17.png", width = 10, height = 9, dpi = 200)
sbs.plt = ggplot()+
geom_tile(data = sbs.df, aes(x = x, y = y, fill = sbs.df[, 3]))+
geom_polygon(data = basemap, aes(x = long, y = lat, group = group))+
coord_quickmap(expand = F)+
xlab("Longitude")+
ylab("Latitude")+
ggtitle("Sea bottom salinity (present-day)")+
scale_fill_gradientn("PPS", colours = sal.cols(10), limits = c(1,40))+
ggtheme
sbs.plt
ggsave("Rplot18.png", width = 10, height = 9, dpi = 200)
sbs.plt = ggplot()+
geom_tile(data = sbs.df, aes(x = x, y = y, fill = sbs.df[, 3]))+
geom_polygon(data = basemap, aes(x = long, y = lat, group = group))+
coord_quickmap(expand = F)+
xlab("Longitude")+
ylab("Latitude")+
ggtitle("Sea bottom salinity (present-day)")+
scale_fill_gradientn("PPS", colours = sal.cols(10), limits = c(1,40))+
ggtheme
sbs.plt
ggsave("Rplot18.png", width = 10, height = 9, dpi = 200)
ssc.plt = ggplot()+
geom_tile(data = ssc.df, aes(x = x, y = y, fill = ssc.df[, 3]))+
geom_polygon(data = basemap, aes(x = long, y = lat, group = group))+
coord_quickmap(expand = F)+
xlab("Longitude")+
ylab("Latitude")+
ggtitle("Sea surface chlorophyll (present-day)")+
scale_fill_gradientn(expression(paste("mg/m"^"3")), colours = chlor.cols(10))+
ggtheme
ssc.plt
ggsave("Rplot19.png", width = 10, height = 9, dpi = 200)
ssca.plt = ggplot()+
geom_tile(data = ssca.df, aes(x = x, y = y, fill = ssca.df[, 3]))+
geom_polygon(data = basemap, aes(x = long, y = lat, group = group))+
coord_quickmap(expand = F)+
xlab("Longitude")+
ylab("Latitude")+
ggtitle("Sea surface calcite (present-day)")+
scale_fill_gradientn(expression(paste("mol/m"^"3")), colours = calct.cols(10))+
ggtheme
ssca.plt
ggsave("Rplot20.png", width = 10, height = 9, dpi = 200)
figAB = ggarrange(sst.plt + labs(tag = "A") + ggtheme + theme(axis.title.y = element_blank()),
sbt.plt + labs(tag = "B") + ggtheme + theme(axis.title.y = element_blank()),
ncol = 2, common.legend = TRUE, legend = "right")
figAB = annotate_figure(figAB,
left = text_grob("Latitude", size = 12, rot = 90))
figCD = ggarrange(sss.plt + labs(tag = "C") + ggtheme + theme(axis.title.y = element_blank()),
sbs.plt + labs(tag = "D") + ggtheme + theme(axis.title.y = element_blank()),
ncol = 2, common.legend = TRUE, legend = "right")
figCD = annotate_figure(figCD,
left = text_grob("Latitude", size = 12, rot = 90))
fig = ggarrange(figAB, figCD, nrow = 2)
ggsave("7.temp_sal_heatmap.png", width = 10, height = 10, dpi = 600)
fig = ggarrange(figAB, figCD, nrow = 2)
ggsave("Rplot21.png", width = 10, height = 10, dpi = 200)
library(tidyverse)
library(psych)
library(adespatial)
library(vegan)
pairs.panels(env.raw, scale = TRUE)
allele_freqs = read.csv("allele_freqs.csv", row.names = 1, check.names = FALSE)
dbmem.raw = read.csv("dbmems.csv")
env.raw = read.csv("environmental_data.csv", row.names = 1)
set.seed(123)
pairs.panels(env.raw, scale = TRUE)
env.data = subset(env.raw, select = -c(sst_mean, sbs_mean))
pairs.panels(env.data, scale = TRUE)
env.for = forward.sel(Y = allele_freqs, X = env.data, alpha = 0.01)
env.for
dbmem.for = forward.sel(Y = allele_freqs, X = dbmem.raw, alpha = 0.01)
dbmem.for
env.sig = subset(env.data, select = env.for$variables)
str(env.sig)
dbmem.sig = subset(dbmem.raw, select = dbmem.for$variables)
str(dbmem.sig)
env.dbmems = cbind(env.sig, dbmem.sig)
str(env.dbmems)
rda1 = rda(allele_freqs ~ ., data = env.dbmems, scale = TRUE)
rda1
RsquareAdj(rda1)
vif.cca(rda1)
anova.cca(rda1, permutations = 1000, by="margin")
summary(eigenvals(rda1, model = "constrained"))
screeplot(rda1)
col_dframe$region = sapply(col_dframe$site, addregion)
col_dframe = data.frame("site" = rownames(allele_freqs))
col_dframe$region = sapply(col_dframe$site, addregion)
region_order = c("Scandinavia","Atlantic","Central Mediterranean", "Aegean Sea")
col_dframe$region = factor(col_dframe$region, levels = region_order)
cols = c("#7FC97F","#377EB8","#FDB462","#E31A1C")
png("rda.png", width = 8, height = 7, units = "in", res = 600)
plot(rda1, type="n", scaling = 3)
title("Seascape redundancy analysis")
points(rda1, display="sites", pch=21, scaling=3, cex=1.5, col="black",
bg=cols[col_dframe$region]) # sites
# text(rda1, display="sites", scaling = 3, col="black", font=2, pos=4)
# PREDICTORS
text(rda1, display="bp", scaling=3, col="red1", cex=1, lwd=2)
# SNPS
# text(rda1, display="species", scaling = 3, col="blue", cex=0.7, pos=4) # SNPs
# LEGEND
legend("bottomleft", legend=levels(col_dframe$region), bty="n", col="black",
pch=21, cex=1.2, pt.bg=cols)
# OTHER LABELS
adj.R2 = round(RsquareAdj(rda1)$adj.r.squared, 3)
mtext(bquote(italic("R")^"2"~"= "~.(adj.R2)), side = 3, adj = 0.5)
dev.off()
addregion = function(x){
# If pop label is present function will output the region
if(x=="Ale"|x=="The"|x=="Tor"|x=="Sky") y = "Aegean Sea"
if(x=="Sar"|x=="Laz") y = "Central Mediterranean"
if(x=="Vig"|x=="Brd"|x=="Cro"|x=="Eye"|x=="Heb"|x=="Iom"|x=="Ios"|x=="Loo"|x=="Lyn"|x=="Ork"|x=="Pad"|x=="Pem"|x=="She"|x=="Sbs"|x=="Sul") y = "Atlantic"
if(x=="Jer"|x=="Idr"|x=="Cor"|x=="Hoo"|x=="Kil"|x=="Mul"|x=="Ven") y = "Atlantic"
if(x=="Hel"|x=="Oos"|x=="Tro"|x=="Ber"|x=="Flo"|x=="Sin"|x=="Gul"|x=="Kav"|x=="Lys") y = "Scandinavia"
return(y)
}
png("rda.png", width = 8, height = 7, units = "in", res = 600)
plot(rda1, type="n", scaling = 3)
title("Seascape redundancy analysis")
# SITES
points(rda1, display="sites", pch=21, scaling=3, cex=1.5, col="black",
bg=cols[col_dframe$region]) # sites
# text(rda1, display="sites", scaling = 3, col="black", font=2, pos=4)
# PREDICTORS
text(rda1, display="bp", scaling=3, col="red1", cex=1, lwd=2)
# SNPS
# text(rda1, display="species", scaling = 3, col="blue", cex=0.7, pos=4) # SNPs
# LEGEND
legend("bottomleft", legend=levels(col_dframe$region), bty="n", col="black",
pch=21, cex=1.2, pt.bg=cols)
# OTHER LABELS
adj.R2 = round(RsquareAdj(rda1)$adj.r.squared, 3)
mtext(bquote(italic("R")^"2"~"= "~.(adj.R2)), side = 3, adj = 0.5)
dev.off()
col_dframe = data.frame("site" = rownames(allele_freqs))
addregion = function(x){
# If pop label is present function will output the region
if(x=="Ale"|x=="The"|x=="Tor"|x=="Sky") y = "Aegean Sea"
if(x=="Sar"|x=="Laz") y = "Central Mediterranean"
if(x=="Vig"|x=="Brd"|x=="Cro"|x=="Eye"|x=="Heb"|x=="Iom"|x=="Ios"|x=="Loo"|x=="Lyn"|x=="Ork"|x=="Pad"|x=="Pem"|x=="She"|x=="Sbs"|x=="Sul") y = "Atlantic"
if(x=="Jer"|x=="Idr"|x=="Cor"|x=="Hoo"|x=="Kil"|x=="Mul"|x=="Ven") y = "Atlantic"
if(x=="Hel"|x=="Oos"|x=="Tro"|x=="Ber"|x=="Flo"|x=="Sin"|x=="Gul"|x=="Kav"|x=="Lys") y = "Scandinavia"
return(y)
}
col_dframe$region = sapply(col_dframe$site, addregion)
# 增加因子水平
region_order = c("Scandinavia","Atlantic","Central Mediterranean", "Aegean Sea")
col_dframe$region = factor(col_dframe$region, levels = region_order)
# 创建调色板
# blue=#377EB8, green=#7FC97F, orange=#FDB462, red=#E31A1C
cols = c("#7FC97F","#377EB8","#FDB462","#E31A1C")
png("rda.png", width = 8, height = 7, units = "in", res = 600)
plot(rda1, type="n", scaling = 3)
title("Seascape redundancy analysis")
# SITES
points(rda1, display="sites", pch=21, scaling=3, cex=1.5, col="black",
bg=cols[col_dframe$region]) # sites
# text(rda1, display="sites", scaling = 3, col="black", font=2, pos=4)
# PREDICTORS
text(rda1, display="bp", scaling=3, col="red1", cex=1, lwd=2)
# SNPS
# text(rda1, display="species", scaling = 3, col="blue", cex=0.7, pos=4) # SNPs
# LEGEND
legend("bottomleft", legend=levels(col_dframe$region), bty="n", col="black",
pch=21, cex=1.2, pt.bg=cols)
# OTHER LABELS
adj.R2 = round(RsquareAdj(rda1)$adj.r.squared, 3)
mtext(bquote(italic("R")^"2"~"= "~.(adj.R2)), side = 3, adj = 0.5)
dev.off()
pRDA = rda(allele_freqs ~ sbt_mean + sss_mean + ssca_mean + Condition(MEM1+MEM2+MEM3+MEM5),
data = env.dbmems, scale = TRUE)
pRDA
RsquareAdj(pRDA) # adjusted Rsquared
vif.cca(pRDA) # variance inflation factor (<10 OK)
anova.cca(pRDA, permutations = 1000) # full model
anova.cca(pRDA, permutations = 1000, by = "margin") # per variable
png("partial_rda.png", width = 9, height = 7, units = "in", res = 600)
plot(pRDA, type="n", scaling = 3)
title("Seascape partial redundancy analysis")
# SITES
points(pRDA, display="sites", pch=21, scaling=3, cex=1.5, col="black",
bg=cols[col_dframe$region]) # sites
text(pRDA, display="sites", scaling = 3, col="black", font=2, pos=4)
# PREDICTORS
text(pRDA, display="bp", scaling=3, col="red1", cex=1, lwd=2)
# SNPS
# text(pRDA, display="species", scaling = 3, col="blue", cex=0.7, pos=4) # SNPs
# LEGEND
legend("topleft", legend=levels(col_dframe$region), bty="n", col="black",
pch=21, cex=1.2, pt.bg=cols)
# OTHER LABELS
adj.R2 = round(RsquareAdj(pRDA)$adj.r.squared, 3)
mtext(bquote(italic("R")^"2"~"= "~.(adj.R2)), side = 3, adj = 0.5)
dev.off()
anova.cca(pRDA, permutations = 1000, by = "axis")
snp.load = scores(pRDA, choices = 1, display = "species")
hist(snp.load, main = "SNP loadings on RDA1")
